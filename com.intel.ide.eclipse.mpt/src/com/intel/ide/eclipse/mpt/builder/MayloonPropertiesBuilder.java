package com.intel.ide.eclipse.mpt.builder;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;
import java.util.Properties;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.IncrementalProjectBuilder;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;

import com.intel.ide.eclipse.mpt.MptConstants;
import com.intel.ide.eclipse.mpt.MptPluginConsole;
import com.intel.ide.eclipse.mpt.utils.ProjectUtil;

public class MayloonPropertiesBuilder extends IncrementalProjectBuilder {
	public static final String BUILDER_ID = "com.intel.ide.eclipse.mpt.MayloonPropertiesBuilder";
	
	private static final String J2S_OUTPUT_PATH = "j2s.out.path";
	private static final String J2S_COMPILER_STATUS = "j2s.compiler.status";
	private static final String J2S_COMPILER_MODE = "j2s.compiler.mode";
	 

	@SuppressWarnings("rawtypes")
	@Override
	protected IProject[] build(int kind, Map args, IProgressMonitor monitor) throws CoreException {
		IProject project = getProject();
		if(ProjectUtil.isLibraryProject(project)) {
			return project.getReferencedProjects();
		}
		AntPropertiesBuilder antPropertiesbuilder = new AntPropertiesBuilder(JavaCore.create(getProject()));
		antPropertiesbuilder.build();
		
		// .mayloon properties generation
		// move to conversion logic
		// mayloonPropBuild();
		
		return project.getReferencedProjects();
	}
	
	public static void mayloonPropBuild(IProject project) {
		Properties prop = new Properties();
		IJavaProject javaProject = JavaCore.create(project);
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		
//		// TODO luqiang, get net.sf.j2s.lib/j2slib/ from eclipse plugin api!!!
//		String j2sLibPath = "../net.sf.j2s.lib/j2slib/";
//				
//		prop.setProperty(J2S_RESROUCE_LIST, j2sLibPath + "java.runtime.j2x");
		
		IPath path;
		try {
			path = javaProject.getOutputLocation();
			IResource resource = root.findMember(path);
			if(resource != null && resource.exists()) {
				prop.setProperty(J2S_OUTPUT_PATH,  resource.getLocation().toFile().getAbsolutePath().toString());
			}
		} catch (JavaModelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		prop.setProperty(J2S_COMPILER_STATUS, "enable");
		prop.setProperty(J2S_COMPILER_MODE, "debug");
		prop.setProperty(MptConstants.J2S_DEPLOY_MODE, "browser");
		
		saveProperty(prop, javaProject);
	}
	
	/**
	 * Save properties to .j2s file
	 * @param prop
	 */
	public static void saveProperty(Properties prop, IJavaProject javaProject) {
		FileOutputStream stream = null;
		try {
			File location = new File(javaProject.getProject().getLocation().toFile(), MptConstants.MAYLOON_PROJECT_SETTING);
			PrintWriter writer = new PrintWriter(stream = new FileOutputStream(location));
			prop.store(writer, "Mayloon Compile Setting. This is automatically generated by Mayloon Builder.");
			writer.flush();
			writer.close();
		} catch (IOException e) {
			MptPluginConsole.warning(MptConstants.BUILD_TAG, "Mayloon build properties could not be generated due to cause {%1$s}", e.getMessage());
		} finally {
			if(stream != null) {
				try {
					stream.close();
				} catch (IOException e) {
				}
			}
		}
	}

}
